name: Build
on:
  workflow_dispatch:
    inputs:
      product-id:
        description: "What hammer build workflow to use"
        default: "meta_human_dna_addon_blender_4_2"
        type: string
        required: true
      version-tag:
        description: "What versioned release tag of the source code to use."
        default: "latest"
        type: string
        required: true
      python-version:
        description: "What version of Python to build against."
        default: "3.11"
        type: string
        required: true

jobs:
  # build-windows-amd64:
  #   name: Windows amd64 Build
  #   runs-on: windows-latest
  #   timeout-minutes: 60
  #   env:
  #     SWIG_MAJOR_VERSION: "4"
  #     SWIG_MINOR_VERSION: "1"
  #     SWIG_PATCH_VERSION: "1"
  #   steps:      
  #     - name: Checkout Repo
  #       uses: actions/checkout@v4

  #     - name: Install Build Dependencies
  #       shell: powershell
  #       run: |
  #         choco install cmake -version=3.31.0 -y
  #         choco install visualstudio2022buildtools -y
  #         choco install visualstudio2022-workload-vctools -y

  #     - name: Set up Python ${{ inputs.python-version }}
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ inputs.python-version }}
        
  #     - name: Install Swig
  #       shell: powershell
  #       run: |
  #         Invoke-WebRequest -Uri https://phoenixnap.dl.sourceforge.net/project/swig/swigwin/swigwin-${env:SWIG_MAJOR_VERSION}.${env:SWIG_MINOR_VERSION}.${env:SWIG_PATCH_VERSION}/swigwin-${env:SWIG_MAJOR_VERSION}.${env:SWIG_MINOR_VERSION}.${env:SWIG_PATCH_VERSION}.zip?viasf=1 -OutFile "swigwin.zip"
  #         Expand-Archive -Path "swigwin.zip" -DestinationPath ".\swigwin"

  #     - name: Run Hammer Build Tool
  #       shell: powershell
  #       run: |
  #         $env:CURRENT_PATH=(Get-Location).Path
  #         $env:SWIG_DIR="$env:CURRENT_PATH\swigwin\swigwin-${env:SWIG_MAJOR_VERSION}.${env:SWIG_MINOR_VERSION}.${env:SWIG_PATCH_VERSION}"
  #         .\bin\windows\amd64\hammer.exe build --github-token ${{ secrets.GH_PAT }} --product-id ${{ inputs.product-id }}
      
  #     - name: Upload Windows amd64 Artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: dist-windows-amd64
  #         path: dist/windows/amd64/
  #         if-no-files-found: error
  #         overwrite: true

  build-linux-x86_64:
    name: Linux x86_64 Build
    runs-on: ubuntu-latest

    permissions:
      checks: write

    container:
      image: ghcr.io/poly-hammer/hammer-build-tool-linux:latest
      options: --user root
      credentials:
        username: ${{ secrets.GH_USER }}
        password: ${{ secrets.GH_PAT }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}

      - name: Run Hammer Build Tool
        run: |
          /usr/local/bin/python${{ inputs.python-version }} -m venv .venv
          source ./.venv/bin/activate
          ./bin/linux/x86_64/hammer build --github-token ${{ secrets.GH_PAT }} --product-id ${{ inputs.product-id }}

      - name: Upload Linux x86_64 Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-linux-x86_64
          path: dist/linux/x86_64/
          if-no-files-found: error
          overwrite: true

  release:
    needs: [build-linux-x86_64]
    # needs: [build-linux-x86_64, build-windows-amd64]
    name: Release
    runs-on: ubuntu-latest
    steps:      
      - name: Checkout Repo
        uses: actions/checkout@v4

      # - name: Download Mac arm64 Artifacts
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: dist-mac-arm64
      #     path: dist/mac/arm64

      - name: Download Linux x86_64 Artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-linux-x86_64
          path: dist/linux/x86_64

      # - name: Download Windows amd64 Artifacts
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: dist-windows-amd64
      #     path: dist/windows/amd64

      - name: Deploy Addon
        run: |
          ./bin/linux/x86_64/hammer deploy --github-token ${{ secrets.GH_PAT }} --repo ${{ github.repository }} --product-id ${{ inputs.product-id }} --version-tag ${{ inputs.version-tag }}